/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */

interface ContractDetails {
  address: string;
  abi: any[];
  inheritedFunctions?: any;
}

interface DeployedContracts {
  [chainId: string]: {
    [contractName: string]: ContractDetails;
  };
}

export const deployedContracts: DeployedContracts = {
  31337: {
    BalanceManager: {
      address: "0x6732128f9cc0c4344b2d4dc6285bcd516b7e59e6",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "_feeReceiver",
              type: "address",
              internalType: "address",
            },
            {
              name: "_feeMaker",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_feeTaker",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "deposit",
          inputs: [
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "feeMaker",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "feeTaker",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getBalance",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getLockedBalance",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "lock",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "lockedBalanceOf",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setAuthorizedOperator",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setFees",
          inputs: [
            {
              name: "_feeMaker",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_feeTaker",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferLockedFrom",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOut",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "unlock",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "withdraw",
          inputs: [
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "withdraw",
          inputs: [
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Deposit",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OperatorSet",
          inputs: [
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "TransferFrom",
          inputs: [
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "sender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "receiver",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "feeAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Withdrawal",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20TransferFailed",
          inputs: [],
        },
        {
          type: "error",
          name: "InsufficientBalance",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "want",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "have",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "NativeTransferFailed",
          inputs: [],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ReentrancyGuardReentrantCall",
          inputs: [],
        },
        {
          type: "error",
          name: "TransferError",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "UnauthorizedOperator",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ZeroAmount",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        deposit: "src/interfaces/IBalanceManager.sol",
        getBalance: "src/interfaces/IBalanceManager.sol",
        lock: "src/interfaces/IBalanceManager.sol",
        setAuthorizedOperator: "src/interfaces/IBalanceManager.sol",
        setFees: "src/interfaces/IBalanceManager.sol",
        transferFrom: "src/interfaces/IBalanceManager.sol",
        transferLockedFrom: "src/interfaces/IBalanceManager.sol",
        transferOut: "src/interfaces/IBalanceManager.sol",
        unlock: "src/interfaces/IBalanceManager.sol",
        withdraw: "src/interfaces/IBalanceManager.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    PoolManager: {
      address: "0x15ff10fcc8a1a50bfbe07847a22664801ea79e0f",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "_balanceManager",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "addCommonIntermediary",
          inputs: [
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allCurrencies",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "Currency",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "commonIntermediaries",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "Currency",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "createPool",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_lotSize",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_maxOrderAmount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "createPoolKey",
          inputs: [
            {
              name: "currency1",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "currency2",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "baseCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "quoteCurrency",
                  type: "address",
                  internalType: "Currency",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getAllCurrencies",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address[]",
              internalType: "Currency[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getCommonIntermediaries",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address[]",
              internalType: "Currency[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPool",
          inputs: [
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "baseCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "quoteCurrency",
                  type: "address",
                  internalType: "Currency",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct IPoolManager.Pool",
              components: [
                {
                  name: "maxOrderAmount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lotSize",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "baseCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "quoteCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "orderBook",
                  type: "address",
                  internalType: "contract IOrderBook",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPoolId",
          inputs: [
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "baseCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "quoteCurrency",
                  type: "address",
                  internalType: "Currency",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "PoolId",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getPoolLiquidityScore",
          inputs: [
            {
              name: "currency1",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "currency2",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isCommonIntermediary",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "poolExists",
          inputs: [
            {
              name: "currency1",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "currency2",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "poolLiquidity",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "PoolId",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "pools",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "PoolId",
            },
          ],
          outputs: [
            {
              name: "maxOrderAmount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "lotSize",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "orderBook",
              type: "address",
              internalType: "contract IOrderBook",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "registeredCurrencies",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "removeCommonIntermediary",
          inputs: [
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setRouter",
          inputs: [
            {
              name: "_router",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updatePoolLiquidity",
          inputs: [
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "baseCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "quoteCurrency",
                  type: "address",
                  internalType: "Currency",
                },
              ],
            },
            {
              name: "liquidityScore",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "CurrencyAdded",
          inputs: [
            {
              name: "currency",
              type: "address",
              indexed: false,
              internalType: "Currency",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "IntermediaryAdded",
          inputs: [
            {
              name: "currency",
              type: "address",
              indexed: false,
              internalType: "Currency",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "IntermediaryRemoved",
          inputs: [
            {
              name: "currency",
              type: "address",
              indexed: false,
              internalType: "Currency",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "poolId",
              type: "bytes32",
              indexed: true,
              internalType: "PoolId",
            },
            {
              name: "orderBook",
              type: "address",
              indexed: false,
              internalType: "address",
            },
            {
              name: "baseCurrency",
              type: "address",
              indexed: false,
              internalType: "Currency",
            },
            {
              name: "quoteCurrency",
              type: "address",
              indexed: false,
              internalType: "Currency",
            },
            {
              name: "lotSize",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "maxOrderAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolLiquidityUpdated",
          inputs: [
            {
              name: "poolId",
              type: "bytes32",
              indexed: false,
              internalType: "PoolId",
            },
            {
              name: "newLiquidity",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "InvalidRouter",
          inputs: [],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        addCommonIntermediary: "src/interfaces/IPoolManager.sol",
        createPool: "src/interfaces/IPoolManager.sol",
        createPoolKey: "src/interfaces/IPoolManager.sol",
        getAllCurrencies: "src/interfaces/IPoolManager.sol",
        getCommonIntermediaries: "src/interfaces/IPoolManager.sol",
        getPool: "src/interfaces/IPoolManager.sol",
        getPoolId: "src/interfaces/IPoolManager.sol",
        getPoolLiquidityScore: "src/interfaces/IPoolManager.sol",
        poolExists: "src/interfaces/IPoolManager.sol",
        removeCommonIntermediary: "src/interfaces/IPoolManager.sol",
        setRouter: "src/interfaces/IPoolManager.sol",
        updatePoolLiquidity: "src/interfaces/IPoolManager.sol",
      },
    },
    GTXRouter: {
      address: "0xae9ed85de2670e3112590a2bb17b7283ddf44d9c",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_poolManager",
              type: "address",
              internalType: "address",
            },
            {
              name: "_balanceManager",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceManager",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IBalanceManager",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "cancelOrder",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
            {
              name: "orderId",
              type: "uint48",
              internalType: "OrderId",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getBestPrice",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct IOrderBook.PriceVolume",
              components: [
                {
                  name: "price",
                  type: "uint64",
                  internalType: "Price",
                },
                {
                  name: "volume",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNextBestPrices",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
            {
              name: "count",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct IOrderBook.PriceVolume[]",
              components: [
                {
                  name: "price",
                  type: "uint64",
                  internalType: "Price",
                },
                {
                  name: "volume",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOrderQueue",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
          ],
          outputs: [
            {
              name: "orderCount",
              type: "uint48",
              internalType: "uint48",
            },
            {
              name: "totalVolume",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getUserActiveOrders",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct IOrderBook.Order[]",
              components: [
                {
                  name: "id",
                  type: "uint48",
                  internalType: "OrderId",
                },
                {
                  name: "user",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "next",
                  type: "uint48",
                  internalType: "OrderId",
                },
                {
                  name: "prev",
                  type: "uint48",
                  internalType: "OrderId",
                },
                {
                  name: "timestamp",
                  type: "uint48",
                  internalType: "uint48",
                },
                {
                  name: "expiry",
                  type: "uint48",
                  internalType: "uint48",
                },
                {
                  name: "price",
                  type: "uint64",
                  internalType: "Price",
                },
                {
                  name: "status",
                  type: "uint8",
                  internalType: "enum Status",
                },
                {
                  name: "quantity",
                  type: "uint128",
                  internalType: "Quantity",
                },
                {
                  name: "filled",
                  type: "uint128",
                  internalType: "Quantity",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "placeMarketOrder",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "quantity",
              type: "uint128",
              internalType: "Quantity",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "orderId",
              type: "uint48",
              internalType: "OrderId",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "placeMarketOrderWithDeposit",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
            {
              name: "quantity",
              type: "uint128",
              internalType: "Quantity",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "orderId",
              type: "uint48",
              internalType: "OrderId",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "placeOrder",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
            {
              name: "quantity",
              type: "uint128",
              internalType: "Quantity",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "orderId",
              type: "uint48",
              internalType: "OrderId",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "placeOrderWithDeposit",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
            {
              name: "quantity",
              type: "uint128",
              internalType: "Quantity",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "orderId",
              type: "uint48",
              internalType: "OrderId",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "poolManager",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IPoolManager",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "swap",
          inputs: [
            {
              name: "srcCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "dstCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "srcAmount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "minDstAmount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "maxHops",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "receivedAmount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "error",
          name: "SlippageTooHigh",
          inputs: [
            {
              name: "received",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "minReceived",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
      ],
      inheritedFunctions: {},
    },
  },
  31338: {
    BalanceManager: {
      address: "0x141c7319fc47e9583c6c5717ea90e93f90d2e7ce",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "_feeReceiver",
              type: "address",
              internalType: "address",
            },
            {
              name: "_feeMaker",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_feeTaker",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceOf",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "balance",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "deposit",
          inputs: [
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "feeMaker",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "feeTaker",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getBalance",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getLockedBalance",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "lock",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "lockedBalanceOf",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setAuthorizedOperator",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setFees",
          inputs: [
            {
              name: "_feeMaker",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_feeTaker",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferFrom",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferLockedFrom",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOut",
          inputs: [
            {
              name: "sender",
              type: "address",
              internalType: "address",
            },
            {
              name: "receiver",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "unlock",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "withdraw",
          inputs: [
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "withdraw",
          inputs: [
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "Deposit",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OperatorSet",
          inputs: [
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "approved",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "TransferFrom",
          inputs: [
            {
              name: "operator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "sender",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "receiver",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "feeAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "Withdrawal",
          inputs: [
            {
              name: "user",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              indexed: true,
              internalType: "uint256",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "ERC20TransferFailed",
          inputs: [],
        },
        {
          type: "error",
          name: "InsufficientBalance",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "id",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "want",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "have",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "NativeTransferFailed",
          inputs: [],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ReentrancyGuardReentrantCall",
          inputs: [],
        },
        {
          type: "error",
          name: "TransferError",
          inputs: [
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
        {
          type: "error",
          name: "UnauthorizedOperator",
          inputs: [
            {
              name: "operator",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ZeroAmount",
          inputs: [],
        },
      ],
      inheritedFunctions: {
        deposit: "src/interfaces/IBalanceManager.sol",
        getBalance: "src/interfaces/IBalanceManager.sol",
        lock: "src/interfaces/IBalanceManager.sol",
        setAuthorizedOperator: "src/interfaces/IBalanceManager.sol",
        setFees: "src/interfaces/IBalanceManager.sol",
        transferFrom: "src/interfaces/IBalanceManager.sol",
        transferLockedFrom: "src/interfaces/IBalanceManager.sol",
        transferOut: "src/interfaces/IBalanceManager.sol",
        unlock: "src/interfaces/IBalanceManager.sol",
        withdraw: "src/interfaces/IBalanceManager.sol",
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
      },
    },
    PoolManager: {
      address: "0x2c71c002d03d7b594e9e5151c9ce4f81ba0f6e45",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_owner",
              type: "address",
              internalType: "address",
            },
            {
              name: "_balanceManager",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "addCommonIntermediary",
          inputs: [
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "allCurrencies",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "Currency",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "commonIntermediaries",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "Currency",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "createPool",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_lotSize",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_maxOrderAmount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "createPoolKey",
          inputs: [
            {
              name: "currency1",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "currency2",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "baseCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "quoteCurrency",
                  type: "address",
                  internalType: "Currency",
                },
              ],
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getAllCurrencies",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address[]",
              internalType: "Currency[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getCommonIntermediaries",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address[]",
              internalType: "Currency[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPool",
          inputs: [
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "baseCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "quoteCurrency",
                  type: "address",
                  internalType: "Currency",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct IPoolManager.Pool",
              components: [
                {
                  name: "maxOrderAmount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "lotSize",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "baseCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "quoteCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "orderBook",
                  type: "address",
                  internalType: "contract IOrderBook",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getPoolId",
          inputs: [
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "baseCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "quoteCurrency",
                  type: "address",
                  internalType: "Currency",
                },
              ],
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "PoolId",
            },
          ],
          stateMutability: "pure",
        },
        {
          type: "function",
          name: "getPoolLiquidityScore",
          inputs: [
            {
              name: "currency1",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "currency2",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "isCommonIntermediary",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "poolExists",
          inputs: [
            {
              name: "currency1",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "currency2",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "poolLiquidity",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "PoolId",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "pools",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "PoolId",
            },
          ],
          outputs: [
            {
              name: "maxOrderAmount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "lotSize",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "orderBook",
              type: "address",
              internalType: "contract IOrderBook",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "registeredCurrencies",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "removeCommonIntermediary",
          inputs: [
            {
              name: "currency",
              type: "address",
              internalType: "Currency",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setRouter",
          inputs: [
            {
              name: "_router",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updatePoolLiquidity",
          inputs: [
            {
              name: "key",
              type: "tuple",
              internalType: "struct PoolKey",
              components: [
                {
                  name: "baseCurrency",
                  type: "address",
                  internalType: "Currency",
                },
                {
                  name: "quoteCurrency",
                  type: "address",
                  internalType: "Currency",
                },
              ],
            },
            {
              name: "liquidityScore",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "CurrencyAdded",
          inputs: [
            {
              name: "currency",
              type: "address",
              indexed: false,
              internalType: "Currency",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "IntermediaryAdded",
          inputs: [
            {
              name: "currency",
              type: "address",
              indexed: false,
              internalType: "Currency",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "IntermediaryRemoved",
          inputs: [
            {
              name: "currency",
              type: "address",
              indexed: false,
              internalType: "Currency",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolCreated",
          inputs: [
            {
              name: "poolId",
              type: "bytes32",
              indexed: true,
              internalType: "PoolId",
            },
            {
              name: "orderBook",
              type: "address",
              indexed: false,
              internalType: "address",
            },
            {
              name: "baseCurrency",
              type: "address",
              indexed: false,
              internalType: "Currency",
            },
            {
              name: "quoteCurrency",
              type: "address",
              indexed: false,
              internalType: "Currency",
            },
            {
              name: "lotSize",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "maxOrderAmount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "PoolLiquidityUpdated",
          inputs: [
            {
              name: "poolId",
              type: "bytes32",
              indexed: false,
              internalType: "PoolId",
            },
            {
              name: "newLiquidity",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "InvalidRouter",
          inputs: [],
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
      ],
      inheritedFunctions: {
        owner: "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        renounceOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        transferOwnership:
          "lib/openzeppelin-contracts/contracts/access/Ownable.sol",
        addCommonIntermediary: "src/interfaces/IPoolManager.sol",
        createPool: "src/interfaces/IPoolManager.sol",
        createPoolKey: "src/interfaces/IPoolManager.sol",
        getAllCurrencies: "src/interfaces/IPoolManager.sol",
        getCommonIntermediaries: "src/interfaces/IPoolManager.sol",
        getPool: "src/interfaces/IPoolManager.sol",
        getPoolId: "src/interfaces/IPoolManager.sol",
        getPoolLiquidityScore: "src/interfaces/IPoolManager.sol",
        poolExists: "src/interfaces/IPoolManager.sol",
        removeCommonIntermediary: "src/interfaces/IPoolManager.sol",
        setRouter: "src/interfaces/IPoolManager.sol",
        updatePoolLiquidity: "src/interfaces/IPoolManager.sol",
      },
    },
    GTXRouter: {
      address: "0x4300c3f4b040d3314d5a2f7309a1f87ecd8cecc0",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_poolManager",
              type: "address",
              internalType: "address",
            },
            {
              name: "_balanceManager",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "balanceManager",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IBalanceManager",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "cancelOrder",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
            {
              name: "orderId",
              type: "uint48",
              internalType: "OrderId",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getBestPrice",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple",
              internalType: "struct IOrderBook.PriceVolume",
              components: [
                {
                  name: "price",
                  type: "uint64",
                  internalType: "Price",
                },
                {
                  name: "volume",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getNextBestPrices",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
            {
              name: "count",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct IOrderBook.PriceVolume[]",
              components: [
                {
                  name: "price",
                  type: "uint64",
                  internalType: "Price",
                },
                {
                  name: "volume",
                  type: "uint256",
                  internalType: "uint256",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getOrderQueue",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
          ],
          outputs: [
            {
              name: "orderCount",
              type: "uint48",
              internalType: "uint48",
            },
            {
              name: "totalVolume",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getUserActiveOrders",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct IOrderBook.Order[]",
              components: [
                {
                  name: "id",
                  type: "uint48",
                  internalType: "OrderId",
                },
                {
                  name: "user",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "next",
                  type: "uint48",
                  internalType: "OrderId",
                },
                {
                  name: "prev",
                  type: "uint48",
                  internalType: "OrderId",
                },
                {
                  name: "timestamp",
                  type: "uint48",
                  internalType: "uint48",
                },
                {
                  name: "expiry",
                  type: "uint48",
                  internalType: "uint48",
                },
                {
                  name: "price",
                  type: "uint64",
                  internalType: "Price",
                },
                {
                  name: "status",
                  type: "uint8",
                  internalType: "enum Status",
                },
                {
                  name: "quantity",
                  type: "uint128",
                  internalType: "Quantity",
                },
                {
                  name: "filled",
                  type: "uint128",
                  internalType: "Quantity",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "placeMarketOrder",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "quantity",
              type: "uint128",
              internalType: "Quantity",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "orderId",
              type: "uint48",
              internalType: "OrderId",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "placeMarketOrderWithDeposit",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
            {
              name: "quantity",
              type: "uint128",
              internalType: "Quantity",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "orderId",
              type: "uint48",
              internalType: "OrderId",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "placeOrder",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
            {
              name: "quantity",
              type: "uint128",
              internalType: "Quantity",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "orderId",
              type: "uint48",
              internalType: "OrderId",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "placeOrderWithDeposit",
          inputs: [
            {
              name: "_baseCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "_quoteCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "price",
              type: "uint64",
              internalType: "Price",
            },
            {
              name: "quantity",
              type: "uint128",
              internalType: "Quantity",
            },
            {
              name: "side",
              type: "uint8",
              internalType: "enum Side",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "orderId",
              type: "uint48",
              internalType: "OrderId",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "poolManager",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract IPoolManager",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "swap",
          inputs: [
            {
              name: "srcCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "dstCurrency",
              type: "address",
              internalType: "Currency",
            },
            {
              name: "srcAmount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "minDstAmount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "maxHops",
              type: "uint8",
              internalType: "uint8",
            },
            {
              name: "user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "receivedAmount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "error",
          name: "SlippageTooHigh",
          inputs: [
            {
              name: "received",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "minReceived",
              type: "uint256",
              internalType: "uint256",
            },
          ],
        },
      ],
      inheritedFunctions: {},
    },
  },
  421614: {},
  1020201: {},
} as const;
